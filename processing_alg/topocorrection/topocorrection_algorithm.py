# -*- coding: utf-8 -*-

"""
/***************************************************************************
 TerraformTopoCorrection
                                 A QGIS plugin
 Topographically correct provided input layer.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-02-27
        copyright            : (C) 2023 by Tigran Manasyan
        email                : t.manasyan@g.nsu.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Tigran Manasyan'
__date__ = '2023-02-27'
__copyright__ = '(C) 2023 by Tigran Manasyan'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from enum import Enum
from math import radians
from typing import Dict, Any

import processing
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessingContext,
                       QgsProcessingFeedback,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterRasterDestination)

from computation.qgis_utils import add_layer_to_project
from processing_alg.execution_context import QgisExecutionContext
from processing_alg.terraform_algorithm import TerraformProcessingAlgorithm
from processing_alg.topocorrection.CTopoCorrectionAlgorithm import CTopoCorrectionAlgorithm
from processing_alg.topocorrection.CosineCTopoCorrectionAlgorithm import CosineCTopoCorrectionAlgorithm
from processing_alg.topocorrection.CosineTTopoCorrectionAlgorithm import CosineTTopoCorrectionAlgorithm
from processing_alg.topocorrection.MinnaertScsTopoCorrectionAlgorithm import MinnaertScsTopoCorrectionAlgorithm
from processing_alg.topocorrection.MinnaertTopoCorrectionAlgorithm import MinnaertTopoCorrectionAlgorithm
from processing_alg.topocorrection.PbcTopoCorrectionAlgorithm import PbcTopoCorrectionAlgorithm
from processing_alg.topocorrection.PbmTopoCorrectionAlgorithm import PbmTopoCorrectionAlgorithm
from processing_alg.topocorrection.ScsCTopoCorrectionAlgorithm import ScsCTopoCorrectionAlgorithm
from processing_alg.topocorrection.ScsTopoCorrectionAlgorithm import ScsTopoCorrectionAlgorithm
from processing_alg.topocorrection.TeilletRegressionTopoCorrectionAlgorithm import \
    TeilletRegressionTopoCorrectionAlgorithm
from processing_alg.topocorrection.TopoCorrectionAlgorithm import TopoCorrectionContext
from processing_alg.topocorrection.VecaTopoCorrectionAlgorithm import VecaTopoCorrectionAlgorithm


# from processing.core.ProcessingConfig import ProcessingConfig
# from processing.script import ScriptUtils
# print(ProcessingConfig.getSetting('SCRIPTS_FOLDERS'))
# print(ScriptUtils.defaultScriptsFolder())
class TerraformTopoCorrectionAlgorithm(TerraformProcessingAlgorithm):
    class AuxiliaryLayers(Enum):
        ASPECT = 0
        SLOPE = 1
        LUMINANCE = 2

    def __init__(self):
        super().__init__()
        # todo dynamically scan directory
        self.algorithms = self.find_algorithms()

    def find_algorithms(self):
        algorithms = [
            CosineTTopoCorrectionAlgorithm,
            CosineCTopoCorrectionAlgorithm,
            CTopoCorrectionAlgorithm,
            ScsTopoCorrectionAlgorithm,
            ScsCTopoCorrectionAlgorithm,
            MinnaertTopoCorrectionAlgorithm,
            MinnaertScsTopoCorrectionAlgorithm,
            PbmTopoCorrectionAlgorithm,
            VecaTopoCorrectionAlgorithm,
            TeilletRegressionTopoCorrectionAlgorithm,
            PbcTopoCorrectionAlgorithm
        ]
        algorithms_dict = dict()
        for algorithm in algorithms:
            algorithms_dict[algorithm.get_name()] = algorithm()
        return algorithms_dict

    def tr(self, string):
        """
        Returns a translatable string with the self.tr() function.
        """
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        # Must return a new copy of your algorithm.
        return TerraformTopoCorrectionAlgorithm()

    def name(self):
        """
        Returns the unique algorithm name.
        """
        return 'terraform_topocorrection'

    def displayName(self):
        """
        Returns the translated algorithm name.
        """
        return self.tr('Terraform topographic correction')

    def shortHelpString(self):
        """
        Returns a localised short help string for the algorithm.
        """
        return self.tr('Topographically correct provided input layer.')

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and outputs of the algorithm.
        """
        # 'INPUT' is the recommended name for the main input
        # parameter.
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                'INPUT',
                self.tr('Input raster layer')
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                'DEM',
                self.tr('Input DEM layer')
            )
        )

        self.addParameter(
            QgsProcessingParameterEnum(
                'TOPO_CORRECTION_ALGORITHM',
                self.tr('Topological correction algorithm'),
                options=self.algorithms.keys(),
                allowMultiple=False,
                defaultValue=CTopoCorrectionAlgorithm.get_name(),
                usesStaticStrings=True
            )
        )

        self.addParameter(
            QgsProcessingParameterEnum(
                'SHOW_AUXILIARY_LAYERS',
                self.tr('Auxiliary layers to show'),
                options=[e.name for e in self.AuxiliaryLayers],
                allowMultiple=True,
                optional=True
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                'SZA',
                self.tr('Solar zenith angle'),
                defaultValue=57.2478878065826,
                type=QgsProcessingParameterNumber.Double
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                'SOLAR_AZIMUTH',
                self.tr('Solar azimuth'),
                defaultValue=177.744663052425,
                type=QgsProcessingParameterNumber.Double
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterDestination(
                'OUTPUT',
                self.tr('Raster output')
            )
        )

    def processAlgorithm(
            self,
            parameters: Dict[str, Any],
            context: QgsProcessingContext,
            feedback: QgsProcessingFeedback
    ) -> Dict[str, Any]:
        input_layer = self.parameterAsRasterLayer(parameters, 'INPUT', context)
        dem_layer = self.parameterAsRasterLayer(parameters, 'DEM', context)
        solar_zenith_angle = self.parameterAsDouble(parameters, 'SZA', context)
        solar_azimuth = self.parameterAsDouble(parameters, 'SOLAR_AZIMUTH', context)

        # todo migrate topo correction algorithms to QgisExecutionContext
        class TopoCorrectionQgisExecutionContext(QgisExecutionContext):
            def __init__(inner):
                super().__init__(context, feedback, parameters, input_layer, dem_layer, sza_degrees=solar_zenith_angle,
                                 solar_azimuth_degrees=solar_azimuth)

            def calculate_slope(inner, in_radians=True) -> str:
                result_path = super().calculate_slope(in_radians)
                self._add_layer_to_project(context, result_path, self.AuxiliaryLayers.SLOPE, "Slope_gen")
                return result_path

            def calculate_aspect(inner, in_radians=True) -> str:
                result_path = super().calculate_aspect(in_radians)
                self._add_layer_to_project(context, result_path, self.AuxiliaryLayers.ASPECT, "Aspect_gen")
                return result_path

            def calculate_luminance(inner, slope_path=None, aspect_path=None) -> str:
                result_path = super().calculate_luminance(slope_path, aspect_path)
                self._add_layer_to_project(context, result_path, self.AuxiliaryLayers.LUMINANCE, "Luminance_gen")
                return result_path

        # todo tmp solution, need migrate fully to execution_context
        exec_ctx = TopoCorrectionQgisExecutionContext()

        self.show_tmp_layers = self.parameterAsEnums(parameters, 'SHOW_AUXILIARY_LAYERS', context)

        slope_rad_path = exec_ctx.calculate_slope(in_radians=True)
        if feedback.isCanceled():
            return {}

        aspect_path = exec_ctx.calculate_aspect(in_radians=True)
        if feedback.isCanceled():
            return {}

        luminance_path = exec_ctx.calculate_luminance(slope_rad_path, aspect_path)
        if feedback.isCanceled():
            return {}

        # todo replace with exec_ctx
        topo_context = TopoCorrectionContext(
            qgis_context=context,
            qgis_feedback=feedback,
            qgis_params=parameters,
            input_layer=input_layer,
            slope_rad_path=slope_rad_path,
            aspect_path=aspect_path,
            luminance_path=luminance_path,
            solar_zenith_angle=solar_zenith_angle,
            solar_azimuth=solar_azimuth
        )

        tc_algorithm_name = self.parameterAsEnumString(parameters, 'TOPO_CORRECTION_ALGORITHM', context)

        # add validation
        return self.algorithms[tc_algorithm_name].process(topo_context)

    def _add_layer_to_project(self, context, layer_path, show_label: AuxiliaryLayers, name="out"):
        if show_label.value in self.show_tmp_layers:
            add_layer_to_project(context, layer_path, name)
